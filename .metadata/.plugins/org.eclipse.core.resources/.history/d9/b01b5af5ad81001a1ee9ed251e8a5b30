import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class ArticleTest {
	
	DataReader reader = new DataReader();
	ArrayList<Article> articles = reader.readArray("articleMetricsArray.ser");
	Article testArticle = articles.get(0);
	
	@BeforeEach
	void setUp() throws Exception {
	}

	@AfterEach
	void tearDown() throws Exception {
	}

	
	/**
	 * these methods are a bit hard to test. It might appear that we are testing the getter,
	 * but the variables that these getters get are created by other methods within the article class. 
	 * Really, we are testing these methods, not the getters. Calling the getters in this way is 
	 * just the easiest way to extract the variable as our methods create it, which we can then cross-check 
	 * by looking at the actual article.
	 * 
	 * (we've actually done in an manually computed some of these metrics for a sample article...a painstaking process!) 
	 */
	@Test
	void testDensityMethod() {
		double density = testArticle.getLexicalDensity();
		assertEquals(0.528132975101471, density);
	}
	
	
	@Test
	void testReadingLevelMethod() {
		double readingLevel = testArticle.getReadingLevel();
		assertEquals(9.677618026733398, readingLevel);
	}
	
	@Test
	void testCharacterCountMethod() {
		int charCount = testArticle.getCharacterCount();
		assertEquals(3310, charCount);
	}
	
	@Test
	void POSMethods() {
		int nounCount = testArticle.getNounCount();
		int verbCount = testArticle.getVerbCount();
		System.out.println(nounCount);
		System.out.println(verbCount);
		assertEquals(3310, nounCount);
		assertEquals(3310, verbCount);
	}
	
	
	
	
	
	
	
	
	
	
	
	

}
