import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;

import org.knowm.xchart.CategoryChart;
import org.knowm.xchart.CategoryChartBuilder;
import org.knowm.xchart.PieChart;
import org.knowm.xchart.SwingWrapper;
import org.knowm.xchart.style.Styler.ChartTheme;
import org.knowm.xchart.style.Styler.LegendPosition;

public class SimpleBarChart implements Charts{
	
	HashMap<String, Double[]> readingLevelBySource;
	double[] xData;
    double[] yData;
    
    
    public SimpleBarChart() {
    	readingLevelBySource = extractSourceReadingLevelData();	
    	
    }
    
    
    public HashMap<String, Double[]> extractSourceReadingLevelData(){
    	
    	HashMap<String, Double[]> readingLevelBySource = new HashMap<>();
    	
    	 for (Article article: Charts.articles) {
    		 	String source = article.getSource().trim();
    			double readingLevel = article.getReadingLevel();
    			double density = article.getLexicalDensity();

    			if (readingLevelBySource.containsKey(source)) {
    				Double[] levels = readingLevelBySource.get(source);
    				levels[0] += readingLevel;
    				levels[1] += density;
    				readingLevelBySource.replace(source, levels);
	
    				
    			}
    			
    			else {
    				Double[] levels = {readingLevel, density};
    				readingLevelBySource.put(source, levels);
    				
    			}		 
    		 
    	 }
    	 
    	 for (String source : readingLevelBySource.keySet()) {
    		Double[] levels =  readingLevelBySource.get(source);
    		levels[0] = levels[0] / 100;
			levels[1] = levels[1];
    		readingLevelBySource.replace(source, levels);
    		 
    	 }
 	
    	return readingLevelBySource;
    }
    
    
    public HashMap<String, Double[]> normalizeYAgainstAvg(HashMap<String, Double[]> data){
    	
    	double readingAvg = 0;
    	double readingStDev = 0;
    	double densityAvg = 0;
    	double densityStDev = 0;
    	ArrayList<Double> reading = new ArrayList<>();
    	ArrayList<Double> density = new ArrayList<>();
    	
    	for (String source : data.keySet()) {
    		Double[] levels =  data.get(source);
    		readingAvg += levels[0];
			densityAvg += levels[1]; 
			reading.add(levels[0]);
			density.add(levels[1]);
    	 }
    
    	readingAvg = readingAvg / 14;
    	densityAvg = densityAvg / 14;
    	
    	
    	for (String source : data.keySet()) {
    		Double[] levels =  data.get(source);
    		Double readingN = levels[0];
 			Double densityN = levels[1];
    		readingN = Math.pow((double) readingN - readingAvg, 2);
            readingStDev += readingN;
    		
    	
    	 }
    	
    	
    	
    	return data;
    }
    
    
    
    
    
    
    public CategoryChart makeChart() {
    	 
    	 // Create Chart
        CategoryChart chart = new CategoryChartBuilder().width(2000).height(600).title("Reading Level by Source").xAxisTitle("Source").yAxisTitle("ReadingLevel").theme(ChartTheme.GGPlot2).build();
     
     
        // Series
        
        String[] xseries = readingLevelBySource.keySet().toArray(new String[0]);
        ArrayList<Double> y1 = new ArrayList<>();
        ArrayList<Double> y2 = new ArrayList<>();
        
        for (String source : readingLevelBySource.keySet()) {
        	Double[] levels = readingLevelBySource.get(source);
            Double readingLevel = levels[0];
			Double density = levels[1];
			y1.add(readingLevel);
			y2.add(density);
        	
        }
        
        
        
        
        chart.addSeries("reading level",  new ArrayList<String>(Arrays.asList(xseries)), y1);
        chart.addSeries("lexical density",  new ArrayList<String>(Arrays.asList(xseries)), y2);
        
        
        new SwingWrapper<CategoryChart>(chart).displayChart();
        return chart;
      }
    
    
    public static void main(String[] args) {
		SimpleBarChart bm = new SimpleBarChart();
		bm.makeChart();

	}
    
    
}
